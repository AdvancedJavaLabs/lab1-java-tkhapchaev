package org.itmo;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicBoolean;

class Graph {
    public final int V;
    public final ArrayList<Integer>[] adjList;

    public boolean[] visitedSerial;
    public AtomicBoolean[] visitedParallel;

    Graph(int vertices) {
        this.V = vertices;
        adjList = new ArrayList[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }

        visitedSerial = new boolean[vertices];
        visitedParallel = new AtomicBoolean[vertices];
    }

    void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    void parallelBFS(int startVertex, int numberOfThreads) {
        AtomicBoolean[] visited = new AtomicBoolean[V];
        ExecutorService executorService = Executors.newFixedThreadPool(numberOfThreads);

        ConcurrentLinkedQueue<Integer> currentLevel = new ConcurrentLinkedQueue<>();
        // ConcurrentLinkedQueue<Integer> nextLevel = new ConcurrentLinkedQueue<>();

        for (int i = 0; i < V; i++) {
            visited[i] = new AtomicBoolean(false);
        }

        currentLevel.add(startVertex);
        visited[startVertex].set(true);

        while (!currentLevel.isEmpty()) {
            CountDownLatch countDownLatch = new CountDownLatch(numberOfThreads);
            List<Integer>[] nextLevels = new ArrayList[numberOfThreads];

            for (int i = 0; i < numberOfThreads; i++) {
                int taskNumber = i;

                executorService.submit(() -> {
                    List<Integer> nextLevel = new ArrayList<>();

                    try {
                        Integer vertex;

                        while ((vertex = currentLevel.poll()) != null) {
                            for (int neighbor : adjList[vertex]) {
                                if (!visited[neighbor].get() && visited[neighbor].compareAndSet(false, true)) {
                                    nextLevel.add(neighbor);
                                }
                            }
                        }
                    } finally {
                        nextLevels[taskNumber] = nextLevel;
                        countDownLatch.countDown();
                    }
                });
            }

            try {
                countDownLatch.await();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                return;
            }

            for (int i = 0; i < numberOfThreads; i++) {
                currentLevel.addAll(nextLevels[i]);
            }

            /*Integer vertex;

            while ((vertex = nextLevel.poll()) != null) {
                currentLevel.add(vertex);
            }*/
        }

        visitedParallel = visited;
    }

    //Generated by ChatGPT
    void bfs(int startVertex) {
        boolean[] visited = new boolean[V];

        LinkedList<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }

        visitedSerial = visited;
    }
}
